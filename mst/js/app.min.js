(()=>{"use strict";const e=class{constructor(e){this.header=e}fixed(e){window.scrollY>0?this.header.classList.add("j-scroll"):this.header.classList.remove("j-scroll")}start(e){this.header&&this.fixed(e)}},s=class{constructor(e){this.animeElems=e}animeScroll(){const e=new IntersectionObserver(((e,s)=>{e.forEach((e=>{e.isIntersecting&&e.intersectionRatio>.3&&(e.target.classList.add("j-anime"),s.unobserve(e.target))}))}),{rootMargin:"0px",threshold:.3});this.animeElems.forEach((s=>e.observe(s)))}start(){this.animeElems[0]&&this.animeScroll()}};(new class{constructor(){this.page=document.querySelector("[data-page]"),this.header=document.querySelector(".header"),this.animeElems=document.querySelectorAll("[data-anime]")}scrollPage(){const s=new e(this.header);window.addEventListener("scroll",(e=>{s.start(e)}))}start(){this.scrollPage(),new s(this.animeElems).start()}}).start()})();